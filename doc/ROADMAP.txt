[Done]
  + Разобраться с canvas окном
  + Запустить систему в памяти
  + Добавить worldMaxOrgs после которого размножеие невозможно
  + Добавить базовые операции: clone, getEnergy, steps, ...
  + Организмы должны жить в защищенной среде. Их ошибки (в коде) не должны приводить к вылету всей системы
  + Добавить возможность примитивного зрения (getEnergy(x,y))
  + Добавить базовые принципы: скорость мутирования, отбор, размножение
  + Реализовать добавление\удаление\изменение кода организма
  + Сделать автоматическое клонирование в зависимости от кол-ва энергии и одновременно убрать команду clone()
  + Функция должна пользоваться только своими локальными пемеменными
  + Функции не могут вызывать другие функции за исключением главной
  + Функции не могут содержать другие функции (их определения) за исключением главной
  + Функции должны возвращать значение с помощью return в конце. return не может мутировать. Эта строка должна быть всегда
  + Добавить работу с памятью: getMem(), setMem()
  + Добавить setEnergy(), setEnergyRandom() для "разбрасывания" энергитических блоков по полю
  + Придумать минимальный набор функций, с которым система запустится
[TODO]
v0.1 (подумать что из списка должно быть включено сюда)
  - Минимизировать ошибки: удаление переменных\функций, которые используются, замена объявления переменной на ее вызов,...
  - Объявления переменных и функций должны идти в начале функции и не должны перемешиваться с остальным кодом
  - Добавить small-change мутацию
  - Переделать Creature.vars на адреса памяти блоков функций и блоков операторов (if, for). Этот пункт оптимизационный.
  - Добавить функцию мутирования: copy, помимо функций add/change/del,...
  - Добавить while(true) внутри Task() функций организмов, чтобы они могли "помнить". 
  - Ввести понятие блока (if, for,...). Блоки не могут быть вложенными. Блок не может мутировать. 
  - Ввести ограничение на длину жизни
  - Добавить примитивы для общения организмов: say(val::Int8), listen(x::Int16, y::Int16)::Int8. say() должен ложить число (слово в нашем понимании) во внутренний буфер, а listen() должен его от туда забирать. Буфер при этом не обнуляется. В будущем, думаю можно добавить сюда массив чисел.
  - Подумать о разной вероятности ASCII символов в коде. Например пробел будет более вероятным, чем оператор ^=. В догонку к этому нужно сделать мутатор более "умным". Мутации не должны добавляться куда попало, нужно каким-то способом вставлять\менять\удалять их в более "правильные" места. Чтобы они с меньшей вероятностью ломали код.
  - Если число организмов выросло до максимума, то нужно убить самых слабых
  - Сделать короткие команды для удаленного терминала (консоли): @create-organisms, @get-ips, @set-config cfg val,...
  - Сделать более яркую раскраску организмов (сейчас они блеклые - темно голубые) в зависимости от кол-ва энергии
  - Тотальная оптимизация с фиксированными типами
  - Если все умерли, создавать организмы снова и так до стабильного состояния
  - Реализовать паузу\пуск всего инстанса
  - Реализовать сохранение\загрузку всего в файл
  - Все должно быть наследуемым признаком (кроме энергии) (проверить все ли реализовано)
  - Глянуть фотку на телефоне (там много пунктов для этого списка)
  - Добавить клонирование в мутатор (обдумать детали)
  - Комменты в Julia docile или что-то похожее
  - Подумать о половом размножении. Можно ли его вообще реализовать для кода?
  - Подумать про доступ к коду между организмами, когда они рядом. Можно отдельной командой.
  - Поддержка нескольких инстансов
  - Покрыть все юнит тестами
  - Большие программы должны тратить больше энергии
  - Продумать компактное отображение лога\статистики сервера в текстовом режиме
  - Оптимизация с помощью ProfileView
  - 